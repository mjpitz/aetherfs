// Copyright (C) The AetherFS Authors - All Rights Reserved
// See LICENSE for more information.

syntax = "proto3";

package aetherfs.agent.v1;

import "google/api/annotations.proto";

option csharp_namespace = "AetherFS.Agent.V1";
option go_package = "github.com/mjpitz/aetherfs/api/aetherfs/agent/v1;agentv1";
option java_package = "tech.aetherfs.agent.v1";
option java_outer_classname = "APIProto";
option java_generate_equals_and_hash = true;
option java_multiple_files = true;

// PublishRequest instructs the agent to publish the dataset found at the provided path with the associated tags.
message PublishRequest {
  bool sync = 1;

  string path = 2;
  repeated string tags = 3;
  int32 block_size = 4;
}

// PublishResponse is returned when the dataset has been published when the operation is synchronous.
message PublishResponse {
}

// SubscribeRequest is used to programmatically subscribe to dataset updates. Consumers can use this to get notified of
// when new versions of datasets become available.
message SubscribeRequest {
  bool sync = 1;

  string path = 2;
  repeated string tags = 3;
}

// SubscribeResponse returns a mapping of tags to paths where the dataset can be found.
message SubscribeResponse {
  map<string, string> paths = 1;
}

// GracefulShutdownRequest is used to initiate a graceful shutdown of the agent process. This will wait for all
// published datasets to be replicated before returning and then shutting down.
message GracefulShutdownRequest {}

// GracefulShutdownResponse is returned when all
message GracefulShutdownResponse {}

// WatchSubscriptionRequest wraps the SubscribeRequest for streaming.
message WatchSubscriptionRequest {
  SubscribeRequest subscription = 1;
  bool cancel = 2;
}

// WatchSubscriptionResponse returns information dynamically when a new version of a dataset becomes available.
message WatchSubscriptionResponse {
  SubscribeResponse subscription = 1;
  bool cancelled = 2;
}

// AgentAPI defines a set of operations that a client application can perform when speaking to an agent.
service AgentAPI {
  rpc Publish(PublishRequest) returns (PublishResponse) {
    option (google.api.http) = {
      post: "/api/v1/agent/publish"
      body: "*"
    };
  }

  rpc Subscribe(SubscribeRequest) returns (SubscribeResponse) {
    option (google.api.http) = {
      post: "/api/v1/agent/subscribe"
      body: "*"
    };
  }

  rpc GracefulShutdown(GracefulShutdownRequest) returns (GracefulShutdownResponse) {
    option (google.api.http) = {
      post: "/api/v1/agent/shutdown"
      body: "*"
    };
  }

  rpc WatchSubscription(stream WatchSubscriptionRequest) returns (stream WatchSubscriptionResponse) {}
}
