// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datasetv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DatasetAPIClient is the client API for DatasetAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DatasetAPIClient interface {
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error)
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, opts ...grpc.CallOption) (DatasetAPI_SubscribeClient, error)
}

type datasetAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewDatasetAPIClient(cc grpc.ClientConnInterface) DatasetAPIClient {
	return &datasetAPIClient{cc}
}

func (c *datasetAPIClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.dataset.v1.DatasetAPI/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAPIClient) ListTags(ctx context.Context, in *ListTagsRequest, opts ...grpc.CallOption) (*ListTagsResponse, error) {
	out := new(ListTagsResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.dataset.v1.DatasetAPI/ListTags", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAPIClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.dataset.v1.DatasetAPI/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAPIClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.dataset.v1.DatasetAPI/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *datasetAPIClient) Subscribe(ctx context.Context, opts ...grpc.CallOption) (DatasetAPI_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &DatasetAPI_ServiceDesc.Streams[0], "/aetherfs.dataset.v1.DatasetAPI/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &datasetAPISubscribeClient{stream}
	return x, nil
}

type DatasetAPI_SubscribeClient interface {
	Send(*SubscribeRequest) error
	Recv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type datasetAPISubscribeClient struct {
	grpc.ClientStream
}

func (x *datasetAPISubscribeClient) Send(m *SubscribeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *datasetAPISubscribeClient) Recv() (*SubscribeResponse, error) {
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatasetAPIServer is the server API for DatasetAPI service.
// All implementations must embed UnimplementedDatasetAPIServer
// for forward compatibility
type DatasetAPIServer interface {
	List(context.Context, *ListRequest) (*ListResponse, error)
	ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error)
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(DatasetAPI_SubscribeServer) error
	mustEmbedUnimplementedDatasetAPIServer()
}

// UnimplementedDatasetAPIServer must be embedded to have forward compatible implementations.
type UnimplementedDatasetAPIServer struct {
}

func (UnimplementedDatasetAPIServer) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDatasetAPIServer) ListTags(context.Context, *ListTagsRequest) (*ListTagsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTags not implemented")
}
func (UnimplementedDatasetAPIServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedDatasetAPIServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedDatasetAPIServer) Subscribe(DatasetAPI_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedDatasetAPIServer) mustEmbedUnimplementedDatasetAPIServer() {}

// UnsafeDatasetAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DatasetAPIServer will
// result in compilation errors.
type UnsafeDatasetAPIServer interface {
	mustEmbedUnimplementedDatasetAPIServer()
}

func RegisterDatasetAPIServer(s grpc.ServiceRegistrar, srv DatasetAPIServer) {
	s.RegisterService(&DatasetAPI_ServiceDesc, srv)
}

func _DatasetAPI_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAPIServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.dataset.v1.DatasetAPI/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAPIServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAPI_ListTags_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTagsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAPIServer).ListTags(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.dataset.v1.DatasetAPI/ListTags",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAPIServer).ListTags(ctx, req.(*ListTagsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAPI_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAPIServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.dataset.v1.DatasetAPI/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAPIServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAPI_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DatasetAPIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.dataset.v1.DatasetAPI/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DatasetAPIServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DatasetAPI_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DatasetAPIServer).Subscribe(&datasetAPISubscribeServer{stream})
}

type DatasetAPI_SubscribeServer interface {
	Send(*SubscribeResponse) error
	Recv() (*SubscribeRequest, error)
	grpc.ServerStream
}

type datasetAPISubscribeServer struct {
	grpc.ServerStream
}

func (x *datasetAPISubscribeServer) Send(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *datasetAPISubscribeServer) Recv() (*SubscribeRequest, error) {
	m := new(SubscribeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DatasetAPI_ServiceDesc is the grpc.ServiceDesc for DatasetAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DatasetAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aetherfs.dataset.v1.DatasetAPI",
	HandlerType: (*DatasetAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _DatasetAPI_List_Handler,
		},
		{
			MethodName: "ListTags",
			Handler:    _DatasetAPI_ListTags_Handler,
		},
		{
			MethodName: "Lookup",
			Handler:    _DatasetAPI_Lookup_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _DatasetAPI_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _DatasetAPI_Subscribe_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aetherfs/dataset/v1/api.proto",
}
