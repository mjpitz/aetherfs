// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package agentv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AgentAPIClient is the client API for AgentAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgentAPIClient interface {
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error)
	GracefulShutdown(ctx context.Context, in *GracefulShutdownRequest, opts ...grpc.CallOption) (*GracefulShutdownResponse, error)
	WatchSubscription(ctx context.Context, opts ...grpc.CallOption) (AgentAPI_WatchSubscriptionClient, error)
}

type agentAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAgentAPIClient(cc grpc.ClientConnInterface) AgentAPIClient {
	return &agentAPIClient{cc}
}

func (c *agentAPIClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.agent.v1.AgentAPI/Publish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeResponse, error) {
	out := new(SubscribeResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.agent.v1.AgentAPI/Subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) GracefulShutdown(ctx context.Context, in *GracefulShutdownRequest, opts ...grpc.CallOption) (*GracefulShutdownResponse, error) {
	out := new(GracefulShutdownResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.agent.v1.AgentAPI/GracefulShutdown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentAPIClient) WatchSubscription(ctx context.Context, opts ...grpc.CallOption) (AgentAPI_WatchSubscriptionClient, error) {
	stream, err := c.cc.NewStream(ctx, &AgentAPI_ServiceDesc.Streams[0], "/aetherfs.agent.v1.AgentAPI/WatchSubscription", opts...)
	if err != nil {
		return nil, err
	}
	x := &agentAPIWatchSubscriptionClient{stream}
	return x, nil
}

type AgentAPI_WatchSubscriptionClient interface {
	Send(*WatchSubscriptionRequest) error
	Recv() (*WatchSubscriptionResponse, error)
	grpc.ClientStream
}

type agentAPIWatchSubscriptionClient struct {
	grpc.ClientStream
}

func (x *agentAPIWatchSubscriptionClient) Send(m *WatchSubscriptionRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *agentAPIWatchSubscriptionClient) Recv() (*WatchSubscriptionResponse, error) {
	m := new(WatchSubscriptionResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentAPIServer is the server API for AgentAPI service.
// All implementations must embed UnimplementedAgentAPIServer
// for forward compatibility
type AgentAPIServer interface {
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error)
	GracefulShutdown(context.Context, *GracefulShutdownRequest) (*GracefulShutdownResponse, error)
	WatchSubscription(AgentAPI_WatchSubscriptionServer) error
	mustEmbedUnimplementedAgentAPIServer()
}

// UnimplementedAgentAPIServer must be embedded to have forward compatible implementations.
type UnimplementedAgentAPIServer struct {
}

func (UnimplementedAgentAPIServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedAgentAPIServer) Subscribe(context.Context, *SubscribeRequest) (*SubscribeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedAgentAPIServer) GracefulShutdown(context.Context, *GracefulShutdownRequest) (*GracefulShutdownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GracefulShutdown not implemented")
}
func (UnimplementedAgentAPIServer) WatchSubscription(AgentAPI_WatchSubscriptionServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchSubscription not implemented")
}
func (UnimplementedAgentAPIServer) mustEmbedUnimplementedAgentAPIServer() {}

// UnsafeAgentAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgentAPIServer will
// result in compilation errors.
type UnsafeAgentAPIServer interface {
	mustEmbedUnimplementedAgentAPIServer()
}

func RegisterAgentAPIServer(s grpc.ServiceRegistrar, srv AgentAPIServer) {
	s.RegisterService(&AgentAPI_ServiceDesc, srv)
}

func _AgentAPI_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.agent.v1.AgentAPI/Publish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.agent.v1.AgentAPI/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_GracefulShutdown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GracefulShutdownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentAPIServer).GracefulShutdown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.agent.v1.AgentAPI/GracefulShutdown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentAPIServer).GracefulShutdown(ctx, req.(*GracefulShutdownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentAPI_WatchSubscription_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AgentAPIServer).WatchSubscription(&agentAPIWatchSubscriptionServer{stream})
}

type AgentAPI_WatchSubscriptionServer interface {
	Send(*WatchSubscriptionResponse) error
	Recv() (*WatchSubscriptionRequest, error)
	grpc.ServerStream
}

type agentAPIWatchSubscriptionServer struct {
	grpc.ServerStream
}

func (x *agentAPIWatchSubscriptionServer) Send(m *WatchSubscriptionResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *agentAPIWatchSubscriptionServer) Recv() (*WatchSubscriptionRequest, error) {
	m := new(WatchSubscriptionRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AgentAPI_ServiceDesc is the grpc.ServiceDesc for AgentAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgentAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aetherfs.agent.v1.AgentAPI",
	HandlerType: (*AgentAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _AgentAPI_Publish_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _AgentAPI_Subscribe_Handler,
		},
		{
			MethodName: "GracefulShutdown",
			Handler:    _AgentAPI_GracefulShutdown_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchSubscription",
			Handler:       _AgentAPI_WatchSubscription_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "aetherfs/agent/v1/api.proto",
}
