// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package blockv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockAPIClient is the client API for BlockAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockAPIClient interface {
	Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BlockAPI_DownloadClient, error)
	Upload(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_UploadClient, error)
}

type blockAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockAPIClient(cc grpc.ClientConnInterface) BlockAPIClient {
	return &blockAPIClient{cc}
}

func (c *blockAPIClient) Lookup(ctx context.Context, in *LookupRequest, opts ...grpc.CallOption) (*LookupResponse, error) {
	out := new(LookupResponse)
	err := c.cc.Invoke(ctx, "/aetherfs.block.v1.BlockAPI/Lookup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockAPIClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (BlockAPI_DownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockAPI_ServiceDesc.Streams[0], "/aetherfs.block.v1.BlockAPI/Download", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BlockAPI_DownloadClient interface {
	Recv() (*DownloadResponse, error)
	grpc.ClientStream
}

type blockAPIDownloadClient struct {
	grpc.ClientStream
}

func (x *blockAPIDownloadClient) Recv() (*DownloadResponse, error) {
	m := new(DownloadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *blockAPIClient) Upload(ctx context.Context, opts ...grpc.CallOption) (BlockAPI_UploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &BlockAPI_ServiceDesc.Streams[1], "/aetherfs.block.v1.BlockAPI/Upload", opts...)
	if err != nil {
		return nil, err
	}
	x := &blockAPIUploadClient{stream}
	return x, nil
}

type BlockAPI_UploadClient interface {
	Send(*UploadRequest) error
	CloseAndRecv() (*UploadResponse, error)
	grpc.ClientStream
}

type blockAPIUploadClient struct {
	grpc.ClientStream
}

func (x *blockAPIUploadClient) Send(m *UploadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *blockAPIUploadClient) CloseAndRecv() (*UploadResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockAPIServer is the server API for BlockAPI service.
// All implementations must embed UnimplementedBlockAPIServer
// for forward compatibility
type BlockAPIServer interface {
	Lookup(context.Context, *LookupRequest) (*LookupResponse, error)
	Download(*DownloadRequest, BlockAPI_DownloadServer) error
	Upload(BlockAPI_UploadServer) error
	mustEmbedUnimplementedBlockAPIServer()
}

// UnimplementedBlockAPIServer must be embedded to have forward compatible implementations.
type UnimplementedBlockAPIServer struct {
}

func (UnimplementedBlockAPIServer) Lookup(context.Context, *LookupRequest) (*LookupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lookup not implemented")
}
func (UnimplementedBlockAPIServer) Download(*DownloadRequest, BlockAPI_DownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedBlockAPIServer) Upload(BlockAPI_UploadServer) error {
	return status.Errorf(codes.Unimplemented, "method Upload not implemented")
}
func (UnimplementedBlockAPIServer) mustEmbedUnimplementedBlockAPIServer() {}

// UnsafeBlockAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockAPIServer will
// result in compilation errors.
type UnsafeBlockAPIServer interface {
	mustEmbedUnimplementedBlockAPIServer()
}

func RegisterBlockAPIServer(s grpc.ServiceRegistrar, srv BlockAPIServer) {
	s.RegisterService(&BlockAPI_ServiceDesc, srv)
}

func _BlockAPI_Lookup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LookupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockAPIServer).Lookup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/aetherfs.block.v1.BlockAPI/Lookup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockAPIServer).Lookup(ctx, req.(*LookupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockAPI_Download_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BlockAPIServer).Download(m, &blockAPIDownloadServer{stream})
}

type BlockAPI_DownloadServer interface {
	Send(*DownloadResponse) error
	grpc.ServerStream
}

type blockAPIDownloadServer struct {
	grpc.ServerStream
}

func (x *blockAPIDownloadServer) Send(m *DownloadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BlockAPI_Upload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BlockAPIServer).Upload(&blockAPIUploadServer{stream})
}

type BlockAPI_UploadServer interface {
	SendAndClose(*UploadResponse) error
	Recv() (*UploadRequest, error)
	grpc.ServerStream
}

type blockAPIUploadServer struct {
	grpc.ServerStream
}

func (x *blockAPIUploadServer) SendAndClose(m *UploadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *blockAPIUploadServer) Recv() (*UploadRequest, error) {
	m := new(UploadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BlockAPI_ServiceDesc is the grpc.ServiceDesc for BlockAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "aetherfs.block.v1.BlockAPI",
	HandlerType: (*BlockAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Lookup",
			Handler:    _BlockAPI_Lookup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Download",
			Handler:       _BlockAPI_Download_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Upload",
			Handler:       _BlockAPI_Upload_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "aetherfs/block/v1/api.proto",
}
